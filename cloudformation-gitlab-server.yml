# CloudFormation template for creating a gitlab instance
Description: This template is for creating a gitlab instance used for code hosting and pipelines.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev 
  GitLabAMI:
    Description: The AMI id for the gitlab CE instance. Default Version GitLab CE 15.4.0
    Type: AWS::EC2::Image::Id
    Default: ami-084bdc437cd4e726e
  VPCCidrBlock:
    Description: Cidr Block for the VPC 
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CidrBlock: 
    Description: Cidr Block for the First Public Subnet
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CidrBlock: 
    Description: Cidr Block for the Second Public Subnet
    Type: String
    Default: 10.0.2.0/24
  EC2InstanceType:
    Description: Instance Type used for Gitlab instance
    Type: String
    Default: t2.large
  RootEBSVolumeSize:
    Description: size of root ebs volume needed
    Type: String
    Default: 20
  ExistingCertificateArn:
    Description: the ARN for the ssl certificate used 
    Type: String
    Default: arn:aws:acm:ap-southeast-2:172264037239:certificate/97d41d42-ae98-486a-8a04-7c9cdec85c4b


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-1
  
  # Application load balancers require 2 subnets to work. PublicSubnet2 is created for this reason and will not contain any resources.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open port 443 for https traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sec-group
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open port 80 for traffic from the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-sec-group
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  # IAM role to allow ssh through session manager without opening port 22
  SSMIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "EC2 IAM role for SSM access"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-ssm-role
  
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "Ec2InstanceProfileForSSM"
      Roles:
        - !Ref SSMIamRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref GitLabAMI
      InstanceType: !Ref EC2InstanceType
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootEBSVolumeSize
            DeleteOnTermination: 'false'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            apt-get -y install apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
            sudo apt-get -y update
            sudo apt-get -y install gitlab-runner
            sudo apt-get -y install docker-ce docker-ce-cli containerd.io
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-instance
        - Key: 'Powered'
          Value: 'On'

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 80
      Targets:
      - Id: !Ref EC2Instance
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /users/sign_in

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
  
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn : !Ref ExistingCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
  
  # Redirects traffic from http to https
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: "HTTP"
        DefaultActions: 
          - 
            Order: 1
            RedirectConfig: 
                Protocol: "HTTPS"
                Port: "443"
                Host: "#{host}"
                Path: "/#{path}"
                Query: "#{query}"
                StatusCode: "HTTP_301"
            Type: "redirect"
